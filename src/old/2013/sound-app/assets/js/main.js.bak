var 
		SOUNDS = ['1', '2'],
		myAudioContext = [], 
		myAudioAnalyser = [],
    myBuffers = {}, 
		mySpectrum,
		sampleIsPlaying = false,
		globalElement,

		windowWidth = $(window).width(),
	 	windowHeight = $(window).height(),

		canvas = [],
		ctx = [],
		freqByteData = [],

		SAMPLEPATH = '_test';
		
		colorScheme = [
			// Test
			[	
				'red',
				'green'
			]
		]
		
	$(document).ready(function() {
		
		var len = $('canvas').length
		for ( var i = 0; i < len; i++ ) {
			myAudioContext.push(new webkitAudioContext())
      myAudioAnalyser.push(myAudioContext[i].createAnalyser());
      myAudioAnalyser[i].connect(myAudioContext[i].destination);

      var request = [];
			request[i] = new XMLHttpRequest();
      request[i]._soundName = SOUNDS[i];
			request[i].open('GET', 'assets/sounds/' + SAMPLEPATH + '/' + SOUNDS[i] + '.wav', true);
      request[i].responseType = 'arraybuffer';
      request[i].addEventListener('load', bufferSound, false);
      request[i].send();
			
			$('canvas:eq(' + i + ')')
				.attr('width', $(window).width())
				.attr('height', $(window).height())
			
			globalElement = i;
		}
		
		$('canvas').each(function(index) {
			$this = $(this)
			$this[0].getContext('2d').fillStyle = colorScheme[0][index];
		})
		
	})
	
	function bufferSound(event) {
	    var request = event.target;
	    var buffer = myAudioContext[globalElement].createBuffer(event.target.response, false);
	    myBuffers[request._soundName] = myAudioContext[globalElement].createBuffer(request.response, false);
	}

	function playSound(sampleNum) {
		
	    var source = myAudioContext[sampleNum].createBufferSource();
	
	    source.buffer = myBuffers[SOUNDS[sampleNum]];
	
	    source.loop = false;
	    source.connect(myAudioAnalyser[sampleNum])
	    source.connect(myAudioContext[sampleNum].destination)
	    myAudioAnalyser[sampleNum].smoothingTimeConstant = 0.9;
	    source.noteOn(0);
	
	    drawSpectrum(sampleNum);
	}

	function drawSpectrum(sampleNum) {
	
		if (sampleIsPlaying == false) {

			canvas = $('canvas:eq(' + sampleNum + ')')[0];
			ctx[sampleNum] = canvas.getContext('2d');
		
			webkitRequestAnimationFrame(function() {
			    drawSpectrum(sampleNum);
			})
			
	    freqByteData[sampleNum] = new Uint8Array(myAudioAnalyser[sampleNum].frequencyBinCount);
	    myAudioAnalyser[sampleNum].getByteFrequencyData(freqByteData[sampleNum]);
	
	    ctx[sampleNum].clearRect(0, 0, windowWidth, windowHeight);
			
			for ( var i = 0; i < freqByteData[sampleNum].length; i++ ) {
	        ctx[sampleNum].fillRect(i, windowHeight - (freqByteData[sampleNum][i] * (windowHeight / 255)), 1, windowHeight);
	    }
	
		}
		
	}

	$(document).keydown(function (event) {
		switch (event.keyCode) {
	    case 65: {
		 		sampleIsPlaying = true;
	        setTimeout(function() {
 						sampleIsPlaying = false;
						playSound(0);
					}, 10);
	      } 
	    break;
			case 83: {
		 		sampleIsPlaying = true;
	        setTimeout(function() {
 						sampleIsPlaying = false;
						playSound(1);
					}, 10);
	      } 
			break;
		}
	});
